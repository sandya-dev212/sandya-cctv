<?phpnamespace App\Controllers;use App\Controllers\BaseController;use CodeIgniter\Database\BaseConnection;use App\Models\NvrModel;class Videos extends BaseController{    /** UI – default 3 hari terakhir + filter by NVR & Monitor */    public function index()    {        if (!session('isLoggedIn')) return redirect()->to('/login');        $nvrs = (new NvrModel())            ->where('is_active', 1)            ->orderBy('name', 'ASC')->findAll();        // preselect NVR/monitor dari query (dipakai saat klik "Videos" dari Dashboard)        $nvrId = (int)($this->request->getGet('nvr_id') ?? ($nvrs[0]['id'] ?? 0));        $mon   = trim((string)($this->request->getGet('mon') ?? ''));        return view('layout/main', [            'title'   => 'Videos',            'content' => view('videos/index', [                'nvrs'  => $nvrs,                'nvrId' => $nvrId,                'mon'   => $mon,            ]),        ]);    }    /**     * Proxy ? Shinobi     * GET /videos/data?nvr_id=1&mon=C1CCTVSERVEROUT&start=epoch_ms&end=epoch_ms     * Output: { ok, data: [{name, size, play, download}] }     */    public function data()    {        $nvrId = (int)$this->request->getGet('nvr_id');        $mon   = trim((string)$this->request->getGet('mon'));        $start = (int)$this->request->getGet('start'); // epoch ms        $end   = (int)$this->request->getGet('end');   // epoch ms        if (!$nvrId || $mon === '') {            return $this->response->setJSON(['ok'=>false,'error'=>'missing params']);        }        $nvr = (new NvrModel())->find($nvrId);        if (!$nvr) return $this->response->setJSON(['ok'=>false,'error'=>'nvr not found']);        // Shinobi format: YYYY-MM-DDTHH:mm:ss        $fmt = 'Y-m-d\TH:i:s';        $startIso = gmdate($fmt, (int)floor($start/1000));        $endIso   = gmdate($fmt, (int)floor($end/1000));        $base  = rtrim($nvr['base_url'], '/');        $api   = rawurlencode($nvr['api_key']);        $group = rawurlencode($nvr['group_key']);        $mid   = rawurlencode($mon);        // Endpoint list video per monitor        $url = "{$base}/{$api}/videos/{$group}/{$mid}?start={$startIso}&end={$endIso}";        $cli = \Config\Services::curlrequest([            'headers'=>['Accept'=>'application/json'],            'http_errors'=>false,            'timeout'=>25,        ]);        $resp = $cli->get($url);        $code = (int)$resp->getStatusCode();        $json = json_decode($resp->getBody(), true);        if ($code >= 400 || !is_array($json)) {            return $this->response->setJSON(['ok'=>false, 'status'=>$code, 'data'=>[]]);        }        // Dua kemungkinan bentuk: {ok:true, videos:[...]} atau langsung array/list.        $list = $json['videos'] ?? $json;        if (!is_array($list)) $list = [];        $rows = [];        foreach ($list as $v) {            // Shinobi selalu menyediakan "filename" & "href" (path absolut relatif ke host).            $filename = (string)($v['filename'] ?? '');            $href     = (string)($v['href'] ?? $v['actionUrl'] ?? '');            if ($href === '') continue;            $full = $base . $href; // <— INI kunci: jangan potong ke root!            $rows[] = [                // tampilkan string filename agar tidak terjadi bug tahun 1970                'name'     => $filename !== '' ? $filename : basename($href),                'size'     => (int)($v['size'] ?? 0),                'play'     => $full,                'download' => $full,            ];        }        // sort terbaru berdasar nama file (yang mengandung timestamp)        usort($rows, fn($a,$b) => strcmp($b['name'], $a['name']));        return $this->response->setJSON(['ok'=>true, 'data'=>$rows]);    }}