<?phpnamespace App\Controllers;use App\Controllers\BaseController;class Videos extends BaseController{    // UI – default 3 hari terakhir, auto-terisi dari query (?nvr_id=&mon=)    public function index()    {        // ambil daftar NVR buat dropdown        $nvrs = db_connect()->table('nvrs')            ->select('id,name,base_url,api_key,group_key')            ->where('is_active', 1)            ->orderBy('name','ASC')            ->get()->getResultArray();        $nvrId = (int) ($this->request->getGet('nvr_id') ?? 0);        $mon   = trim((string) ($this->request->getGet('mon') ?? ''));        return view('layout/main', [            'title'   => 'Videos',            'content' => view('videos/index', [                'nvrs'   => $nvrs,                'nvr_id' => $nvrId,                'mon'    => $mon,            ]),        ]);    }    // untuk dropdown kamera per NVR    public function monitors()    {        $nvrId = (int) $this->request->getGet('nvr_id');        if ($nvrId <= 0) return $this->response->setJSON(['ok'=>false,'msg'=>'nvr_id required','data'=>[]]);        $db  = db_connect();        $nvr = $db->table('nvrs')->where('id',$nvrId)->get()->getRowArray();        if (!$nvr) return $this->response->setJSON(['ok'=>false,'msg'=>'NVR not found','data'=>[]]);        $cli = new \App\Libraries\Shinobi();        $resp = $cli->getMonitors($nvr['base_url'], $nvr['api_key'], $nvr['group_key'], null);        if (!$resp['ok'] || !is_array($resp['data'])) {            return $this->response->setJSON(['ok'=>false,'msg'=>'Shinobi error','data'=>[]]);        }        $list = $cli->normalizeMonitors($resp['data']);        return $this->response->setJSON(['ok'=>true,'data'=>$list]);    }    // Proxy ke Shinobi: GET /videos/data?nvr_id=&mon=&start=&end=    // start & end => "YYYY-MM-DDTHH:mm:ss" (ISO) – akan diteruskan ke Shinobi    public function data()    {        $nvrId = (int) $this->request->getGet('nvr_id');        $mon   = trim((string)$this->request->getGet('mon'));        $start = trim((string)$this->request->getGet('start'));        $end   = trim((string)$this->request->getGet('end'));        if ($nvrId <= 0 || $mon === '' || $start === '' || $end === '') {            return $this->response->setJSON(['ok'=>false,'error'=>'missing params']);        }        $db  = db_connect();        $nvr = $db->table('nvrs')->where('id',$nvrId)->get()->getRowArray();        if (!$nvr) return $this->response->setJSON(['ok'=>false,'error'=>'NVR not found']);        $base = rtrim($nvr['base_url'], '/');        if (!preg_match('~^https?://~i', $base)) $base = 'https://' . $base;        // Build URL: /[API]/videos/[GROUP]/[MON]?start=…&end=…&endIsStartTo=1        $url = $base . '/' . rawurlencode($nvr['api_key'])             . '/videos/' . rawurlencode($nvr['group_key'])             . '/' . rawurlencode($mon);        $qs = http_build_query([            'start'       => $start,            'end'         => $end,            'endIsStartTo'=> 1,       // cari berdasarkan start time range        ]);        // call        $ch = curl_init($url.'?'.$qs);        curl_setopt_array($ch, [            CURLOPT_RETURNTRANSFER => true,            CURLOPT_CONNECTTIMEOUT => 15,            CURLOPT_TIMEOUT        => 30,            CURLOPT_FOLLOWLOCATION => true,            CURLOPT_SSL_VERIFYPEER => false,            CURLOPT_SSL_VERIFYHOST => 0,            CURLOPT_HTTPHEADER     => ['Accept: application/json'],        ]);        $body = curl_exec($ch);        $err  = curl_error($ch);        $code = (int) curl_getinfo($ch, CURLINFO_HTTP_CODE);        curl_close($ch);        if ($err || $code >= 400) {            return $this->response->setJSON(['ok'=>false, 'error'=> $err ?: ('HTTP '.$code)]);        }        $json = json_decode($body, true);        if (!is_array($json)) {            return $this->response->setJSON(['ok'=>false,'error'=>'bad json']);        }        // Normalisasi ? pastikan start_ts benar (fallback parse dari filename)        $rows = [];        foreach ($json as $v) {            $filename = $v['filename'] ?? $v['href'] ?? '';            if ($filename === '') continue;            // compose absolute url            $playUrl = $base . '/' . ltrim($filename, '/');            // 1) prefer timestamp dari API            $startMs = (int)($v['time'] ?? $v['startTime'] ?? 0);            $ts = 0;            if ($startMs > 0) {                // kalau ms -> konversi ke detik, kalau sudah detik biarin                $ts = ($startMs > 2_000_000_000 ? (int) floor($startMs/1000) : (int)$startMs);            } else {                // 2) fallback parse dari nama file: YYYY-MM-DDTHH-mm-ss                // contoh: 2025-10-13T05-45-01.mp4                if (preg_match('~(\d{4})-(\d{2})-(\d{2})T(\d{2})-(\d{2})-(\d{2})~', $filename, $m)) {                    $ts = gmmktime((int)$m[4], (int)$m[5], (int)$m[6], (int)$m[2], (int)$m[3], (int)$m[1]);                }            }            $duration = (float)($v['duration'] ?? 0);            $size     = $v['size'] ?? ($v['filesize'] ?? '');            $rows[] = [                'start_ts'  => $ts,                'start_str' => $ts ? gmdate('Y-m-d H:i:s', $ts).' UTC' : '—',                'duration'  => $duration,                'size'      => $size,                'play'      => $playUrl,                'download'  => $playUrl,            ];        }        // sort terbaru        usort($rows, fn($a,$b)=> $b['start_ts'] <=> $a['start_ts']);        return $this->response->setJSON(['ok'=>true,'data'=>$rows]);    }}