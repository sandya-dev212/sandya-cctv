<?phpnamespace App\Controllers;use App\Controllers\BaseController;use App\Models\NvrModel;use App\Libraries\Shinobi;class Videos extends BaseController{    public function index()    {        if (!session('isLoggedIn')) return redirect()->to('/login');        $nvrs  = (new NvrModel())->where('is_active',1)->orderBy('name','ASC')->findAll();        // Datang dari dashboard?        $nvrId = (int)($this->request->getGet('nvr_id') ?? 0);        $mon   = trim((string)($this->request->getGet('mon') ?? ''));        $monitors = [];        if ($nvrId && $mon !== '') {            // preload monitors agar dropdown tidak error dan auto-selected            $nvr = (new NvrModel())->find($nvrId);            if ($nvr) {                $cli = new Shinobi();                $res = $cli->getMonitors($nvr['base_url'], $nvr['api_key'], $nvr['group_key']);                if (($res['ok'] ?? false) && is_array($res['data'])) {                    $monitors = $cli->normalizeMonitors($res['data']);                }            }        } else {            // direct dari navbar ? dropdown kosong ("Select")            $nvrId = 0;            $mon   = '';        }        return view('layout/main', [            'title'   => 'Videos',            'content' => view('videos/index', [                'nvrs'     => $nvrs,                'nvrId'    => $nvrId,                'mon'      => $mon,                'monitors' => $monitors,            ]),        ]);    }    // AJAX: ambil monitors saat user pilih NVR    public function monitors()    {        if (!session('isLoggedIn')) return $this->response->setJSON(['ok'=>false,'items'=>[]]);        $nvrId = (int)$this->request->getGet('nvr_id');        if (!$nvrId) return $this->response->setJSON(['ok'=>true,'items'=>[]]);        $nvr = (new NvrModel())->find($nvrId);        if (!$nvr) return $this->response->setJSON(['ok'=>true,'items'=>[]]);        $cli = new Shinobi();        $res = $cli->getMonitors($nvr['base_url'], $nvr['api_key'], $nvr['group_key']);        $items = ($res['ok'] ?? false) ? $cli->normalizeMonitors($res['data']) : [];        return $this->response->setJSON(['ok'=>true,'items'=>$items]);    }    // Data video: gunakan API Shinobi dengan start/end ISO    public function data()    {        $nvrId = (int)$this->request->getGet('nvr_id');        $mon   = trim((string)$this->request->getGet('mon'));        $start = (int)$this->request->getGet('start'); // epoch ms        $end   = (int)$this->request->getGet('end');   // epoch ms        if (!$nvrId || $mon==='') return $this->response->setJSON(['ok'=>false,'error'=>'missing params']);        $nvr = (new NvrModel())->find($nvrId);        if (!$nvr) return $this->response->setJSON(['ok'=>false,'error'=>'nvr not found']);        // ISO UTC – sesuai dok Shinobi        $iso = 'Y-m-d\TH:i:s';        $startIso = gmdate($iso, (int)floor($start/1000));        $endIso   = gmdate($iso, (int)floor($end/1000));        $cli = new Shinobi();        $res = $cli->getVideosRange(            $nvr['base_url'],            $nvr['api_key'],            $nvr['group_key'],            $mon,            $startIso,            $endIso,            null, null, false        );        if (!($res['ok'] ?? false) || !is_array($res['data'])) {            return $this->response->setJSON(['ok'=>false,'status'=>$res['code'] ?? 500,'data'=>[]]);        }        // Response bisa ‘videos’ atau array langsung        $payload = $res['data'];        $list = $payload['videos'] ?? $payload;        if (!is_array($list)) $list = [];        $base = rtrim($nvr['base_url'], '/');        $rows = [];        foreach ($list as $v) {            // Shinobi biasa kirim 'filename' + 'href'            $href = (string)($v['href'] ?? '');            if ($href === '') continue;            $filename = (string)($v['filename'] ?? basename($href));            $size     = (int)($v['size'] ?? 0);            $full     = $base . $href;  // href sudah lengkap path: /API/videos/G/M/FILE.mp4            $rows[] = [                'name'     => $filename,     // tampil filename saja                'size'     => $size,                'play'     => $full,                'download' => $full,            ];        }        // sort filename terbaru (string compare desc)        usort($rows, fn($a,$b)=>strcmp($b['name'],$a['name']));        return $this->response->setJSON(['ok'=>true,'data'=>$rows]);    }}