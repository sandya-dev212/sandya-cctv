<?phpnamespace App\Controllers;use App\Controllers\BaseController;class Videos extends BaseController{    /** List UI: cukup NVR & Camera. Bisa prefill via ?nvr_id=&mon= */    public function index()    {        $db = db_connect();        // Ambil semua NVR aktif buat dropdown        $nvrs = $db->table('nvrs')            ->select('id, name')            ->where('is_active', 1)            ->orderBy('name', 'ASC')            ->get()->getResultArray();        $nvrId = (int)($this->request->getGet('nvr_id') ?? 0);        $mon   = trim((string)$this->request->getGet('mon')); // monitorId        return view('layout/main', [            'title'   => 'Videos',            'content' => view('videos/index', [                'nvrs'   => $nvrs,                'nvr_id' => $nvrId,                'mon'    => $mon,            ]),        ]);    }    /** Proxy daftar monitor per NVR: GET /videos/monitors?nvr_id= */    public function monitors()    {        $nvrId = (int)($this->request->getGet('nvr_id') ?? 0);        if ($nvrId <= 0) {            return $this->response->setJSON(['ok'=>false, 'msg'=>'nvr_id required']);        }        $db = db_connect();        $nvr = $db->table('nvrs')            ->where('id', $nvrId)            ->where('is_active', 1)            ->get()->getRowArray();        if (!$nvr) {            return $this->response->setJSON(['ok'=>false, 'msg'=>'NVR not found']);        }        $cli  = new \App\Libraries\Shinobi();        $resp = $cli->getMonitors($nvr['base_url'], $nvr['api_key'], $nvr['group_key'], null);        if (!$resp['ok'] || !is_array($resp['data'])) {            return $this->response->setJSON(['ok'=>false, 'msg'=>'Shinobi error: cannot list monitors']);        }        $items = $cli->normalizeMonitors($resp['data']); // -> [ ['mid','name',...] ]        $out = array_map(fn($m)=>[            'mid'  => (string)$m['mid'],            'name' => (string)($m['name'] ?? $m['mid']),        ], $items);        return $this->response->setJSON(['ok'=>true, 'data'=>$out]);    }    /**     * Proxy data video: terima nvr_id + mon (+start,end epoch ms)     * Server resolve base/g/k dari DB.     * Tetap kompatibel kalau client kirim base/g/k langsung.     */    public function data()    {        $db     = db_connect();        $nvrId  = (int)($this->request->getGet('nvr_id') ?? 0);        $mon    = trim((string)$this->request->getGet('mon'));        $start  = (string)$this->request->getGet('start'); // epoch ms        $end    = (string)$this->request->getGet('end');   // epoch ms        // Back-compat: kalau ada base/g/k langsung, tetap dipakai        $base = trim((string)$this->request->getGet('base'));        $g    = trim((string)$this->request->getGet('g'));        $k    = trim((string)$this->request->getGet('k'));        if ($nvrId > 0) {            $nvr = $db->table('nvrs')->where('id', $nvrId)->get()->getRowArray();            if (!$nvr) return $this->response->setJSON(['ok'=>false,'error'=>'NVR not found']);            $base = $nvr['base_url'];            $g    = $nvr['group_key'];            $k    = $nvr['api_key'];        }        if ($base === '' || $g === '' || $k === '' || $mon === '') {            return $this->response->setJSON(['ok'=>false,'error'=>'missing params (nvr/base/g/k/mon)']);        }        $client = \Config\Services::curlrequest([            'headers'     => ['Accept' => 'application/json'],            'http_errors' => false,            'timeout'     => 25,        ]);        $url = rtrim($base, '/')."/videos/{$g}/{$k}.json";        $qs  = http_build_query([            'monitors' => $mon,            'start'    => $start,            'end'      => $end,        ]);        $resp  = $client->get($url.'?'.$qs);        $code  = $resp->getStatusCode();        $body  = $resp->getBody();        $json  = json_decode($body, true);        if ($code >= 400) {            return $this->response->setJSON(['ok'=>false,'status'=>$code,'error'=>'Shinobi HTTP '.$code,'data'=>[]]);        }        if (!is_array($json)) {            return $this->response->setJSON(['ok'=>false,'error'=>'invalid JSON from Shinobi','data'=>[]]);        }        // Kompatibilitas kemungkinan struktur: kadang array langsung, kadang ada key 'videos'        if (isset($json['videos']) && is_array($json['videos'])) {            $json = $json['videos'];        }        $rows = [];        foreach ($json as $v) {            // support beberapa nama properti yang berbeda            $filename  = $v['filename'] ?? $v['href'] ?? $v['file'] ?? '';            $startMs   = (int)($v['time'] ?? $v['startTime'] ?? $v['start'] ?? 0);            $duration  = (float)($v['duration'] ?? $v['length'] ?? 0);            $size      = $v['size'] ?? ($v['filesize'] ?? '');            if ($filename === '') continue;            $playUrl = rtrim($base, '/').'/'.ltrim($filename, '/');            $rows[] = [                'start_ts'  => (int)floor($startMs/1000),                'start_str' => gmdate('Y-m-d H:i:s', (int)floor($startMs/1000)).' UTC',                'duration'  => $duration,                'size'      => $size,                'play'      => $playUrl,                'download'  => $playUrl,            ];        }        usort($rows, fn($a,$b)=> $b['start_ts'] <=> $a['start_ts']);        return $this->response->setJSON(['ok'=>true,'data'=>$rows]);    }}