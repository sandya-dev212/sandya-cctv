<?phpnamespace App\Controllers;use App\Controllers\BaseController;use DateTime;use DateTimeZone;class Videos extends BaseController{    public function index()    {        $nvrs = db_connect()->table('nvrs')            ->select('id,name,base_url,api_key,group_key')            ->where('is_active', 1)            ->orderBy('name','ASC')            ->get()->getResultArray();        $nvrId = (int) ($this->request->getGet('nvr_id') ?? 0);        $mon   = trim((string) ($this->request->getGet('mon') ?? ''));        return view('layout/main', [            'title'   => 'Videos',            'content' => view('videos/index', [                'nvrs'   => $nvrs,                'nvr_id' => $nvrId,                'mon'    => $mon,            ]),        ]);    }    public function monitors()    {        $nvrId = (int) $this->request->getGet('nvr_id');        if ($nvrId <= 0) return $this->response->setJSON(['ok'=>false,'msg'=>'nvr_id required','data'=>[]]);        $db  = db_connect();        $nvr = $db->table('nvrs')->where('id',$nvrId)->get()->getRowArray();        if (!$nvr) return $this->response->setJSON(['ok'=>false,'msg'=>'NVR not found','data'=>[]]);        $cli = new \App\Libraries\Shinobi();        $resp = $cli->getMonitors($nvr['base_url'], $nvr['api_key'], $nvr['group_key'], null);        if (!$resp['ok'] || !is_array($resp['data'])) {            return $this->response->setJSON(['ok'=>false,'msg'=>'Shinobi error','data'=>[]]);        }        $list = $cli->normalizeMonitors($resp['data']);        return $this->response->setJSON(['ok'=>true,'data'=>$list]);    }    public function data()    {        $nvrId = (int) $this->request->getGet('nvr_id');        $mon   = trim((string)$this->request->getGet('mon'));        $startIso = trim((string)$this->request->getGet('start')); // "YYYY-MM-DDTHH:mm:ss"        $endIso   = trim((string)$this->request->getGet('end'));        if ($nvrId <= 0 || $mon === '' || $startIso === '' || $endIso === '') {            return $this->response->setJSON(['ok'=>false,'error'=>'missing params']);        }        $db  = db_connect();        $nvr = $db->table('nvrs')->where('id',$nvrId)->get()->getRowArray();        if (!$nvr) return $this->response->setJSON(['ok'=>false,'error'=>'NVR not found']);        $base = rtrim($nvr['base_url'], '/');        if (!preg_match('~^https?://~i', $base)) $base = 'https://' . $base;        // helper http GET        $http = function(string $url){            $ch = curl_init($url);            curl_setopt_array($ch, [                CURLOPT_RETURNTRANSFER => true,                CURLOPT_CONNECTTIMEOUT => 15,                CURLOPT_TIMEOUT        => 30,                CURLOPT_FOLLOWLOCATION => true,                CURLOPT_SSL_VERIFYPEER => false,                CURLOPT_SSL_VERIFYHOST => 0,                CURLOPT_HTTPHEADER     => ['Accept: application/json'],            ]);            $body = curl_exec($ch);            $err  = curl_error($ch);            $code = (int) curl_getinfo($ch, CURLINFO_HTTP_CODE);            curl_close($ch);            return [$code, $err, $body];        };        // ---------- Try #1 : ISO start/end + endIsStartTo ----------        $url1 = $base.'/'.rawurlencode($nvr['api_key']).'/videos/'.rawurlencode($nvr['group_key']).'/'.rawurlencode($mon)              .'?'.http_build_query(['start'=>$startIso,'end'=>$endIso,'endIsStartTo'=>1]);        [$c1,$e1,$b1] = $http($url1);        $rows = $this->normalizeVideosJson($b1, $base);        if ($e1 || $c1>=400) $rows = [];        // ---------- Try #2 : ISO + startOperator/endOperator ----------        if (empty($rows)) {            $url2 = $base.'/'.rawurlencode($nvr['api_key']).'/videos/'.rawurlencode($nvr['group_key']).'/'.rawurlencode($mon)                  .'?'.http_build_query([                        'start'=>$startIso,'startOperator'=>'>=',                        'end'=>$endIso,'endOperator'=>'<='                  ]);            [$c2,$e2,$b2] = $http($url2);            $rows = $this->normalizeVideosJson($b2, $base);            if ($e2 || $c2>=400) $rows = [];        }        // ---------- Try #3 : legacy JSON (epoch ms) ----------        if (empty($rows)) {            [$msStart,$msEnd] = $this->isoToEpochMsRange($startIso,$endIso);            $url3 = $base.'/videos/'.rawurlencode($nvr['group_key']).'/'.rawurlencode($nvr['api_key']).'.json'                  .'?'.http_build_query(['monitors'=>$mon,'start'=>$msStart,'end'=>$msEnd]);            [$c3,$e3,$b3] = $http($url3);            $rows = $this->normalizeLegacyJson($b3, $base);            if ($e3 || $c3>=400) $rows = [];        }        usort($rows, fn($a,$b)=> $b['start_ts'] <=> $a['start_ts']);        return $this->response->setJSON(['ok'=>true,'data'=>$rows]);    }    /* ===== helpers ===== */    private function isoToEpochMsRange(string $startIso, string $endIso): array    {        // treat as local server time -> convert to UTC epoch ms        $tzLocal = new DateTimeZone(date_default_timezone_get());        $tzUtc   = new DateTimeZone('UTC');        $s = DateTime::createFromFormat('Y-m-d\TH:i:s', $startIso, $tzLocal);        $e = DateTime::createFromFormat('Y-m-d\TH:i:s', $endIso, $tzLocal);        if (!$s || !$e) return [0,0];        $s->setTimezone($tzUtc); $e->setTimezone($tzUtc);        return [ $s->getTimestamp()*1000, $e->getTimestamp()*1000 ];    }    private function normalizeVideosJson(?string $body, string $base): array    {        $json = json_decode((string)$body, true);        if (!is_array($json)) return [];        $rows = [];        foreach ($json as $v) {            $filename = $v['filename'] ?? ($v['href'] ?? '');            if ($filename === '') continue;            $playUrl  = rtrim($base,'/').'/'.ltrim($filename,'/');            // prefer time from json            $startMs = (int)($v['time'] ?? $v['startTime'] ?? 0);            $ts = $this->tsFromJsonOrFilename($startMs, $filename);            $rows[] = [                'start_ts'  => $ts,                'start_str' => $ts ? gmdate('Y-m-d H:i:s', $ts).' UTC' : '—',                'duration'  => (float)($v['duration'] ?? 0),                'size'      => $v['size'] ?? ($v['filesize'] ?? ''),                'play'      => $playUrl,                'download'  => $playUrl,            ];        }        return $rows;    }    private function normalizeLegacyJson(?string $body, string $base): array    {        $json = json_decode((string)$body, true);        if (!is_array($json)) return [];        $rows = [];        foreach ($json as $v) {            $filename = $v['filename'] ?? ($v['href'] ?? '');            if ($filename === '') continue;            $playUrl  = rtrim($base,'/').'/'.ltrim($filename,'/');            $startMs = (int)($v['time'] ?? $v['startTime'] ?? 0);            $ts = $this->tsFromJsonOrFilename($startMs, $filename);            $rows[] = [                'start_ts'  => $ts,                'start_str' => $ts ? gmdate('Y-m-d H:i:s', $ts).' UTC' : '—',                'duration'  => (float)($v['duration'] ?? 0),                'size'      => $v['size'] ?? ($v['filesize'] ?? ''),                'play'      => $playUrl,                'download'  => $playUrl,            ];        }        return $rows;    }    private function tsFromJsonOrFilename(int $startMs, string $filename): int    {        if ($startMs > 0) {            return $startMs > 2_000_000_000 ? (int)floor($startMs/1000) : $startMs;        }        if (preg_match('~(\d{4})-(\d{2})-(\d{2})T(\d{2})-(\d{2})-(\d{2})~', $filename, $m)) {            return gmmktime((int)$m[4], (int)$m[5], (int)$m[6], (int)$m[2], (int)$m[3], (int)$m[1]);        }        return 0;    }}