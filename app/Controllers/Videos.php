<?phpnamespace App\Controllers;use App\Controllers\BaseController;use App\Models\NvrModel;class Videos extends BaseController{    // UI — pakai nvr_id & monitor_id, default 3 hari terakhir    public function index()    {        $nvrId = (int)($this->request->getGet('nvr_id') ?? 0);        $mon   = trim((string)$this->request->getGet('mon') ?? '');        // default range = 3 hari terakhir (local server time)        $end   = date('Y-m-d H:i:s');        $start = date('Y-m-d H:i:s', time() - 3*24*3600);        // dropdown sumber data        $nvrs = (new NvrModel())->where('is_active', 1)->orderBy('name')->findAll();        return view('layout/main', [            'title'   => 'Videos',            'content' => view('videos/index', [                'nvrs'   => $nvrs,                'nvr_id' => $nvrId,                'mon'    => $mon,                'start'  => $start,                'end'    => $end,            ]),        ]);    }    /**     * GET /videos/data?nvr_id=&mon=&start=&end=     * - start/end format: "YYYY-mm-dd HH:ii:ss" (akan diubah ke ISO "YYYY-mm-ddTHH:ii:ss")     * - Response: {ok, data:[{name,size,play,download}]}     */    public function data()    {        $nvrId = (int)$this->request->getGet('nvr_id');        $mon   = trim((string)$this->request->getGet('mon'));        $start = trim((string)$this->request->getGet('start'));        $end   = trim((string)$this->request->getGet('end'));        if (!$nvrId || $mon === '') {            return $this->response->setJSON(['ok'=>false,'error'=>'missing params']);        }        $nvr = (new NvrModel())->find($nvrId);        if (!$nvr) {            return $this->response->setJSON(['ok'=>false,'error'=>'nvr not found']);        }        // normalisasi base url (tanpa slash terakhir)        $base = rtrim($nvr['base_url'], '/');        if (!preg_match('~^https?://~i', $base)) $base = 'https://' . $base;        // Shinobi minta ISO "YYYY-mm-ddTHH:ii:ss"        $toIso = function(string $s) {            $s = trim($s);            if ($s === '') return '';            // jika sudah ada 'T' biarkan            if (strpos($s, 'T') !== false) return $s;            return str_replace(' ', 'T', $s);        };        $qs = http_build_query([            'start' => $toIso($start),            'end'   => $toIso($end),        ]);        // Contoh URL:        //   {base}/{apiKey}/videos/{groupKey}/{monitorId}?start=...&end=...        $listUrl = $base            . '/' . rawurlencode($nvr['api_key'])            . '/videos/' . rawurlencode($nvr['group_key'])            . '/' . rawurlencode($mon)            . '?' . $qs;        $ch = curl_init($listUrl);        curl_setopt_array($ch, [            CURLOPT_RETURNTRANSFER => true,            CURLOPT_CONNECTTIMEOUT => 10,            CURLOPT_TIMEOUT        => 25,            CURLOPT_SSL_VERIFYPEER => false,            CURLOPT_SSL_VERIFYHOST => 0,            CURLOPT_FOLLOWLOCATION => true,            CURLOPT_HTTPHEADER     => ['Accept: application/json'],        ]);        $body = curl_exec($ch);        $curlErr = curl_error($ch);        $code = (int)curl_getinfo($ch, CURLINFO_HTTP_CODE);        curl_close($ch);        if ($curlErr || $code >= 400) {            return $this->response->setJSON([                'ok'=>false,                'status'=>$code,                'error'=>$curlErr ?: ('HTTP '.$code),                'data'=>[],            ]);        }        $json = json_decode($body, true);        if (!is_array($json)) {            return $this->response->setJSON(['ok'=>false,'error'=>'bad json','data'=>[]]);        }        // Normalisasi: setiap item => filename, size, URL play & download.        // Kita TAMPILKAN nama file ASLI sebagai kolom "Waktu" sesuai permintaan.        $rows = [];        foreach ($json as $v) {            // Shinobi biasa kirim "filename" atau "href"            $filename = '';            if (!empty($v['filename']))      $filename = $v['filename'];            elseif (!empty($v['href']))       $filename = $v['href'];            elseif (!empty($v['ext']) && !empty($v['time'])) {                // fallback sangat jarang                $filename = gmdate('Y-m-d\TH-i-s', (int)floor(($v['time'] ?? 0)/1000)) . '.' . ltrim($v['ext'], '.');            }            $filename = ltrim($filename, '/');            // Full path (mengikuti pola Shinobi):            //   {base}/{apiKey}/videos/{groupKey}/{monitorId}/{filename}            $full = $base                . '/' . rawurlencode($nvr['api_key'])                . '/videos/' . rawurlencode($nvr['group_key'])                . '/' . rawurlencode($mon)                . '/' . $filename;            $rows[] = [                // tampilkan murni nama file sebagai "Waktu"                'name'     => basename($filename),                'size'     => (int)($v['size'] ?? 0),                'play'     => $full,      // digunakan untuk modal player                'download' => $full,      // anchor download (new tab)            ];        }        // sort terbaru berdasarkan nama file jika mengikuti format YYYY-mm-ddTHH-mm-ss        usort($rows, function($a,$b){            return strcmp($b['name'], $a['name']);        });        return $this->response->setJSON(['ok'=>true,'data'=>$rows]);    }}