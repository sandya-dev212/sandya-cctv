<?phpnamespace App\Controllers;use App\Controllers\BaseController;use App\Models\NvrModel;use App\Libraries\Shinobi;class Videos extends BaseController{    /** UI – diisi via dropdown NVR & Monitor. Default: 3 hari terakhir. */    public function index()    {        if (!session('isLoggedIn')) return redirect()->to('/login');        $nvrM  = new NvrModel();        $nvrs  = $nvrM->where('is_active', 1)->orderBy('name')->findAll();        $nvrId = (int) ($this->request->getGet('nvr_id') ?? ($nvrs[0]['id'] ?? 0));        $mon   = trim((string)($this->request->getGet('mon') ?? ''));        // ambil monitors utk NVR aktif        $mons = [];        if ($nvrId) {            $nvr  = $nvrM->find($nvrId);            if ($nvr) {                $cli  = new Shinobi();                $resp = $cli->getMonitors($nvr['base_url'], $nvr['api_key'], $nvr['group_key'], null);                if ($resp['ok'] && is_array($resp['data'])) {                    $mons = $cli->normalizeMonitors($resp['data']);                }            }        }        // default time range: 3 hari terakhir        $endDefault   = date('Y-m-d H:i:s');        $startDefault = date('Y-m-d H:i:s', time() - 3 * 24 * 3600);        return view('layout/main', [            'title'   => 'Videos',            'content' => view('videos/index', [                'nvrs'         => $nvrs,                'nvr_id'       => $nvrId,                'mon'          => $mon,                'monitors'     => $mons,                'startDefault' => $startDefault,                'endDefault'   => $endDefault,            ]),        ]);    }    /**     * DATA: GET /videos/data?nvr_id=&mon=&start=&end=     * start/end format: "Y-m-d H:i:s" (server local). Kita convert ? "YYYY-MM-DDTHH:mm:ss".     * Response: {ok:true,data:[{start_ts, start_str, duration, size, play, download}]}     */    public function data()	{		if (!session('isLoggedIn')) return $this->response->setJSON(['ok'=>false,'error'=>'unauthorized']);			$nvrId = (int) $this->request->getGet('nvr_id');		$mon   = trim((string)$this->request->getGet('mon'));		$start = trim((string)$this->request->getGet('start')); // "Y-m-d H:i:s"		$end   = trim((string)$this->request->getGet('end'));   // "Y-m-d H:i:s"			if (!$nvrId || $mon === '') return $this->response->setJSON(['ok'=>false,'error'=>'missing params']);			$nvr = (new \App\Models\NvrModel())->find($nvrId);		if (!$nvr) return $this->response->setJSON(['ok'=>false,'error'=>'nvr not found']);			// Helpers		$httpGet = function(string $url) {			$ch = curl_init($url);			curl_setopt_array($ch, [				CURLOPT_RETURNTRANSFER=>true,				CURLOPT_CONNECTTIMEOUT=>12,				CURLOPT_TIMEOUT=>30,				CURLOPT_FOLLOWLOCATION=>true,				CURLOPT_SSL_VERIFYPEER=>false,				CURLOPT_SSL_VERIFYHOST=>0,				CURLOPT_HTTPHEADER=>['Accept: application/json'],			]);			$body = curl_exec($ch);			$err  = curl_error($ch);			$code = (int)curl_getinfo($ch, CURLINFO_HTTP_CODE);			curl_close($ch);			return [$code, $err, $body];		};		$normRow = function(array $v, array $nvr) {			$filename = (string)($v['filename'] ?? ($v['href'] ?? ''));			if ($filename === '') return null;			$playUrl = rtrim($nvr['base_url'], '/').'/'.ltrim($filename, '/');				// timestamp: prefer v['time'], else parse filename "YYYY-MM-DDTHH-MM-SS"			$ts = 0;			if (!empty($v['time'])) {				$t = (int)$v['time'];				if ($t > 2000000000) $t = (int)floor($t/1000); // ms -> s				$ts = $t;			} else {				if (preg_match('~(\d{4})-(\d{2})-(\d{2})[T_]?(\d{2})-(\d{2})-(\d{2})~', $filename, $m)) {					$dt = \DateTime::createFromFormat('Y-m-d H-i-s', "$m[1]-$m[2]-$m[3] $m[4]-$m[5]-$m[6]");					if ($dt) $ts = $dt->getTimestamp();				}			}			return [				'start_ts'  => $ts,				'start_str' => $ts>0 ? gmdate('Y-m-d H:i:s', $ts).' UTC' : ($v['time'] ?? $filename),				'duration'  => (float)($v['duration'] ?? 0),				'size'      => $v['size'] ?? ($v['bytes'] ?? ''),				'play'      => $playUrl,				'download'  => $playUrl,			];		};			// parse waktu input		$fmt      = 'Y-m-d H:i:s';		$startObj = \DateTime::createFromFormat($fmt, $start) ?: new \DateTime('-3 days');		$endObj   = \DateTime::createFromFormat($fmt, $end)   ?: new \DateTime();		$startIso = $startObj->format('Y-m-d\TH:i:s');		$endIso   = $endObj->format('Y-m-d\TH:i:s');		$startMs  = (string)($startObj->getTimestamp() * 1000);		$endMs    = (string)($endObj->getTimestamp()   * 1000);			$apiBase = rtrim($nvr['base_url'],'/').'/'.rawurlencode($nvr['api_key']);			// 1) API resmi		$url1 = $apiBase.'/videos/'.rawurlencode($nvr['group_key']).'/'.rawurlencode($mon)			.'?start='.rawurlencode($startIso)			.'&startOperator=%3E%3D'			.'&end='.rawurlencode($endIso)			.'&endOperator=%3C%3D'			.'&endIsStartTo=1';			[$code1,$err1,$body1] = $httpGet($url1);		$rows = [];		if ($code1>=200 && $code1<400 && $body1) {			$json = json_decode($body1, true);			if (isset($json['videos']) && is_array($json['videos'])) $json = $json['videos'];			if (is_array($json)) {				foreach ($json as $v) {					$row = $normRow($v, $nvr);					if ($row) $rows[] = $row;				}			}		}			// 2) Fallback legacy .json (kalau kosong)		if (empty($rows)) {			$url2 = $apiBase.'/videos/'.rawurlencode($nvr['group_key']).'.json'				.'?monitors='.rawurlencode($mon)				.'&start='.$startMs				.'&end='.$endMs;			[$code2,$err2,$body2] = $httpGet($url2);			if ($code2>=200 && $code2<400 && $body2) {				$json = json_decode($body2, true);				if (is_array($json)) {					foreach ($json as $v) {						$row = $normRow($v, $nvr);						if (!$row) continue;						// filter manual by range (kalau parse ts berhasil)						if ($row['start_ts']>0) {							if ($row['start_ts'] < $startObj->getTimestamp()) continue;							if ($row['start_ts'] > $endObj->getTimestamp()) continue;						}						$rows[] = $row;					}				}			}		}			// urutkan terbaru		usort($rows, fn($a,$b)=> $b['start_ts'] <=> $a['start_ts']);			return $this->response->setJSON(['ok'=>true,'data'=>$rows]);	}	}