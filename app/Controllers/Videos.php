<?phpnamespace App\Controllers;use App\Controllers\BaseController;use App\Models\NvrModel;use App\Libraries\Shinobi;class Videos extends BaseController{    // UI – default 3 hari terakhir. Bisa auto-isi dari query (?nvr_id=&mon=)    public function index()    {        if (!session('isLoggedIn')) return redirect()->to('/login');        $nvrs  = (new NvrModel())->where('is_active',1)->orderBy('name','ASC')->findAll();        $nvrId = (int)($this->request->getGet('nvr_id') ?? ($nvrs[0]['id'] ?? 0));        $mon   = trim((string)($this->request->getGet('mon') ?? ''));        // isi monitors server-side agar tidak tampil "(error)"        $monitors = [];        if ($nvrId) {            $nvr = (new NvrModel())->find($nvrId);            if ($nvr) {                $cli = new Shinobi();                $res = $cli->getMonitors($nvr['base_url'], $nvr['api_key'], $nvr['group_key']);                if (($res['ok'] ?? false) && is_array($res['data'])) {                    $monitors = $cli->normalizeMonitors($res['data']);                }            }        }        return view('layout/main', [            'title'   => 'Videos',            'content' => view('videos/index', [                'nvrs'     => $nvrs,                'nvrId'    => $nvrId,                'mon'      => $mon,                'monitors' => $monitors,            ]),        ]);    }    // AJAX monitors untuk dropdown saat NVR diganti    public function monitors()    {        if (!session('isLoggedIn')) return $this->response->setJSON(['ok'=>false,'items'=>[]]);        $nvrId = (int)$this->request->getGet('nvr_id');        if (!$nvrId) return $this->response->setJSON(['ok'=>true,'items'=>[]]);        $nvr = (new NvrModel())->find($nvrId);        if (!$nvr) return $this->response->setJSON(['ok'=>true,'items'=>[]]);        $cli = new Shinobi();        $res = $cli->getMonitors($nvr['base_url'], $nvr['api_key'], $nvr['group_key']);        $items = ($res['ok'] ?? false) ? $cli->normalizeMonitors($res['data']) : [];        return $this->response->setJSON(['ok'=>true,'items'=>$items]);    }    // Proxy ke Shinobi: GET /videos/data?nvr_id=&mon=&start=&end=    public function data()    {        $nvrId = (int)$this->request->getGet('nvr_id');        $mon   = trim((string)$this->request->getGet('mon'));        $start = (int)$this->request->getGet('start'); // epoch ms        $end   = (int)$this->request->getGet('end');   // epoch ms        if (!$nvrId || $mon==='') return $this->response->setJSON(['ok'=>false,'error'=>'missing params']);        $nvr = (new NvrModel())->find($nvrId);        if (!$nvr) return $this->response->setJSON(['ok'=>false,'error'=>'nvr not found']);        // Shinobi expects ISO without TZ: YYYY-MM-DDTHH:mm:ss (UTC)        $fmt = 'Y-m-d\TH:i:s';        $startIso = gmdate($fmt, (int)floor($start/1000));        $endIso   = gmdate($fmt, (int)floor($end/1000));        $base  = rtrim($nvr['base_url'], '/');        $api   = rawurlencode($nvr['api_key']);        $group = rawurlencode($nvr['group_key']);        $mid   = rawurlencode($mon);        $url = "{$base}/{$api}/videos/{$group}/{$mid}?start={$startIso}&end={$endIso}";        $cli = \Config\Services::curlrequest([            'headers'=>['Accept'=>'application/json'],            'http_errors'=>false,            'timeout'=>25,        ]);        $resp = $cli->get($url);        $code = (int)$resp->getStatusCode();        $json = json_decode($resp->getBody(), true);        if ($code >= 400 || !is_array($json)) {            return $this->response->setJSON(['ok'=>false,'status'=>$code,'data'=>[]]);        }        $list = $json['videos'] ?? $json;        if (!is_array($list)) $list = [];        $rows = [];        foreach ($list as $v) {            $filename = (string)($v['filename'] ?? '');            $href     = (string)($v['href'] ?? $v['actionUrl'] ?? '');            if ($href === '') continue;            $full = rtrim($nvr['base_url'], '/') . $href;            $rows[] = [                'name'     => $filename !== '' ? $filename : basename($href),                'size'     => (int)($v['size'] ?? 0),                'play'     => $full,                'download' => $full,            ];        }        usort($rows, fn($a,$b)=>strcmp($b['name'],$a['name']));        return $this->response->setJSON(['ok'=>true,'data'=>$rows]);    }}