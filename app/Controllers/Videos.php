<?phpnamespace App\Controllers;use App\Controllers\BaseController;use App\Models\NvrModel;use App\Libraries\Shinobi;class Videos extends BaseController{    /** UI – diisi via dropdown NVR & Monitor. Default: 3 hari terakhir. */    public function index()    {        if (!session('isLoggedIn')) return redirect()->to('/login');        $nvrM  = new NvrModel();        $nvrs  = $nvrM->where('is_active', 1)->orderBy('name')->findAll();        $nvrId = (int) ($this->request->getGet('nvr_id') ?? ($nvrs[0]['id'] ?? 0));        $mon   = trim((string)($this->request->getGet('mon') ?? ''));        // ambil monitors utk NVR aktif        $mons = [];        if ($nvrId) {            $nvr  = $nvrM->find($nvrId);            if ($nvr) {                $cli  = new Shinobi();                $resp = $cli->getMonitors($nvr['base_url'], $nvr['api_key'], $nvr['group_key'], null);                if ($resp['ok'] && is_array($resp['data'])) {                    $mons = $cli->normalizeMonitors($resp['data']);                }            }        }        // default time range: 3 hari terakhir        $endDefault   = date('Y-m-d H:i:s');        $startDefault = date('Y-m-d H:i:s', time() - 3 * 24 * 3600);        return view('layout/main', [            'title'   => 'Videos',            'content' => view('videos/index', [                'nvrs'         => $nvrs,                'nvr_id'       => $nvrId,                'mon'          => $mon,                'monitors'     => $mons,                'startDefault' => $startDefault,                'endDefault'   => $endDefault,            ]),        ]);    }    /**     * DATA: GET /videos/data?nvr_id=&mon=&start=&end=     * start/end format: "Y-m-d H:i:s" (server local). Kita convert ? "YYYY-MM-DDTHH:mm:ss".     * Response: {ok:true,data:[{start_ts, start_str, duration, size, play, download}]}     */    public function data()    {        if (!session('isLoggedIn')) return $this->response->setJSON(['ok'=>false,'error'=>'unauthorized']);        $nvrId = (int) $this->request->getGet('nvr_id');        $mon   = trim((string)$this->request->getGet('mon'));        $start = trim((string)$this->request->getGet('start'));        $end   = trim((string)$this->request->getGet('end'));        if (!$nvrId || $mon === '') {            return $this->response->setJSON(['ok'=>false,'error'=>'missing params']);        }        // load NVR        $nvr = (new NvrModel())->find($nvrId);        if (!$nvr) return $this->response->setJSON(['ok'=>false,'error'=>'nvr not found']);        // format waktu buat Shinobi        $fmtIn  = 'Y-m-d H:i:s';        $sObj   = \DateTime::createFromFormat($fmtIn, $start) ?: new \DateTime('-3 days');        $eObj   = \DateTime::createFromFormat($fmtIn, $end)   ?: new \DateTime();        // Shinobi butuh 'T' separator        $startIso = $sObj->format('Y-m-d\TH:i:s');        $endIso   = $eObj->format('Y-m-d\TH:i:s');        // hit endpoint: /[API]/videos/[GROUP]/[MON]?start=...&end=...&endIsStartTo=1        $base = rtrim((new Shinobi())->hlsUrl($nvr['base_url'], $nvr['api_key'], $nvr['group_key'], $mon), '/hls/'.$nvr['group_key'].'/'.$mon.'/s.m3u8');        $apiBase = rtrim($nvr['base_url'], '/').'/'.rawurlencode($nvr['api_key']).'/videos/'.rawurlencode($nvr['group_key']).'/'.rawurlencode($mon);        $url = $apiBase.'?'.http_build_query([            'start'        => $startIso,            'end'          => $endIso,            'endIsStartTo' => '1',        // cari berdasarkan start-range (lebih aman)        ]);        // request        $ch = curl_init($url);        curl_setopt_array($ch, [            CURLOPT_RETURNTRANSFER => true,            CURLOPT_CONNECTTIMEOUT => 12,            CURLOPT_TIMEOUT        => 25,            CURLOPT_FOLLOWLOCATION => true,            CURLOPT_SSL_VERIFYPEER => false,            CURLOPT_SSL_VERIFYHOST => 0,            CURLOPT_HTTPHEADER     => ['Accept: application/json'],        ]);        $body = curl_exec($ch);        $err  = curl_error($ch);        $code = (int) curl_getinfo($ch, CURLINFO_HTTP_CODE);        curl_close($ch);        if ($err || $code >= 400) {            return $this->response->setJSON(['ok'=>false,'error'=>'http:'.$code.' '.$err, 'data'=>[]]);        }        $json = json_decode($body, true);        if (!is_array($json)) {            // ada instance yang balikin object root {videos:[...]}; coba ambil videos            if (is_array($json['videos'] ?? null)) $json = $json['videos'];            else return $this->response->setJSON(['ok'=>true,'data'=>[]]);        }        // normalisasi row        $rows = [];        foreach ($json as $v) {            // sebagian response punya field "filename" / "href" / "time" / "size" / "duration"            $filename = (string)($v['filename'] ?? ($v['href'] ?? ''));            if ($filename === '') continue;            // build direct URL            // kalau $filename sudah absolute path "videos/..", tinggal gabung base            $playUrl = rtrim($nvr['base_url'], '/').'/'.ltrim($filename, '/');            // waktu: prioritas pakai "time" kalau ada; kalau tidak, parse dari nama file: YYYY-MM-DDTHH-MM-SS            $ts = 0;            if (!empty($v['time'])) {                // "time" bisa ms atau detik; amankan                $t = (int)$v['time'];                // ms ? detik                if ($t > 2000000000) $t = (int) floor($t/1000);                $ts = $t;            } else {                if (preg_match('~(\d{4})-(\d{2})-(\d{2})[T_]?(\d{2})-(\d{2})-(\d{2})~', $filename, $m)) {                    $dt = \DateTime::createFromFormat('Y-m-d H-i-s', "{$m[1]}-{$m[2]}-{$m[3]} {$m[4]}-{$m[5]}-{$m[6]}");                    if ($dt) $ts = $dt->getTimestamp();                }            }            if ($ts <= 0) $ts = 0; // fallback (jarang terjadi)            $rows[] = [                'start_ts'  => $ts,                'start_str' => $ts>0 ? gmdate('Y-m-d H:i:s', $ts).' UTC' : ($v['time'] ?? $filename),                'duration'  => (float)($v['duration'] ?? 0),                'size'      => $v['size'] ?? ($v['bytes'] ?? ''),                'play'      => $playUrl,                'download'  => $playUrl, // biarin sama; client side target=_blank            ];        }        // sort terbaru di atas        usort($rows, fn($a,$b) => $b['start_ts'] <=> $a['start_ts']);        return $this->response->setJSON(['ok'=>true,'data'=>$rows]);    }}