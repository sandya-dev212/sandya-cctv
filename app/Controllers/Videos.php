<?phpnamespace App\Controllers;use App\Controllers\BaseController;class Videos extends BaseController{    // UI – default 3 hari terakhir, auto-terisi dari query (?base=&g=&k=&mon=&cam=)    public function index()    {        $base = trim((string)$this->request->getGet('base'));        $g    = trim((string)$this->request->getGet('g'));      // groupKey        $k    = trim((string)$this->request->getGet('k'));      // apiKey        $mon  = trim((string)$this->request->getGet('mon'));    // monitorId        $cam  = trim((string)$this->request->getGet('cam'));    // camera name (optional label)        // fallback kosong – user bisa isi manual di UI nanti        return view('layout/main', [            'title'   => 'Videos',            'content' => view('videos/index', [                'base' => $base,                'g'    => $g,                'k'    => $k,                'mon'  => $mon,                'cam'  => $cam,            ]),        ]);    }    // Proxy ke Shinobi: GET /videos/data?base=&g=&k=&mon=&start=&end=    public function data()    {        $base  = trim((string)$this->request->getGet('base'));        $g     = trim((string)$this->request->getGet('g'));        $k     = trim((string)$this->request->getGet('k'));        $mon   = trim((string)$this->request->getGet('mon'));        $start = (string)$this->request->getGet('start'); // epoch ms        $end   = (string)$this->request->getGet('end');   // epoch ms        if ($base === '' || $g === '' || $k === '' || $mon === '') {            return $this->response->setJSON(['ok'=>false,'error'=>'missing params']);        }        $client = \Config\Services::curlrequest([            'headers'     => ['Accept' => 'application/json'],            'http_errors' => false,            'timeout'     => 25,        ]);        $url = rtrim($base, '/')."/videos/{$g}/{$k}.json";        $qs  = http_build_query([            'monitors' => $mon,            'start'    => $start,            'end'      => $end,        ]);        $resp = $client->get($url.'?'.$qs);        $code = $resp->getStatusCode();        $body = $resp->getBody();        $json = json_decode($body, true);        if ($code >= 400 || !is_array($json)) {            return $this->response->setJSON(['ok'=>false,'status'=>$code,'data'=>[]]);        }        // Normalisasi minimal        $rows = [];        foreach ($json as $v) {            $filename  = $v['filename'] ?? ($v['href'] ?? '');            $startMs   = (int)($v['time'] ?? $v['startTime'] ?? 0);            $duration  = (float)($v['duration'] ?? 0);            $size      = $v['size'] ?? '';            $playUrl = rtrim($base, '/').'/'.ltrim($filename, '/');            $rows[] = [                'start_ts'  => (int)floor($startMs/1000),                'start_str' => gmdate('Y-m-d H:i:s', (int)floor($startMs/1000)).' UTC',                'duration'  => $duration,                'size'      => $size,                'play'      => $playUrl,                'download'  => $playUrl,            ];        }        // sort terbaru        usort($rows, fn($a,$b)=> $b['start_ts'] <=> $a['start_ts']);        return $this->response->setJSON(['ok'=>true,'data'=>$rows]);    }}