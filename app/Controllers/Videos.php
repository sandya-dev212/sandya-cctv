<?phpnamespace App\Controllers;use App\Controllers\BaseController;class Videos extends BaseController{    public function index()    {        $db = db_connect();        $nvrs = $db->table('nvrs')            ->select('id, name')            ->where('is_active', 1)            ->orderBy('name', 'ASC')            ->get()->getResultArray();        $nvrId = (int)($this->request->getGet('nvr_id') ?? 0);        $mon   = trim((string)$this->request->getGet('mon'));        return view('layout/main', [            'title'   => 'Videos',            'content' => view('videos/index', [                'nvrs'   => $nvrs,                'nvr_id' => $nvrId,                'mon'    => $mon,            ]),        ]);    }    public function monitors()    {        $nvrId = (int)($this->request->getGet('nvr_id') ?? 0);        if ($nvrId <= 0) return $this->response->setJSON(['ok'=>false, 'msg'=>'nvr_id required']);        $db  = db_connect();        $nvr = $db->table('nvrs')->where('id', $nvrId)->where('is_active',1)->get()->getRowArray();        if (!$nvr) return $this->response->setJSON(['ok'=>false, 'msg'=>'NVR not found']);        $cli  = new \App\Libraries\Shinobi();        $resp = $cli->getMonitors($nvr['base_url'], $nvr['api_key'], $nvr['group_key'], null);        if (!$resp['ok'] || !is_array($resp['data'])) return $this->response->setJSON(['ok'=>false, 'msg'=>'Shinobi error: cannot list monitors']);        $items = $cli->normalizeMonitors($resp['data']);        $out = array_map(fn($m)=>['mid'=>(string)$m['mid'], 'name'=>(string)($m['name'] ?? $m['mid'])], $items);        return $this->response->setJSON(['ok'=>true, 'data'=>$out]);    }    public function data()    {        $db     = db_connect();        $nvrId  = (int)($this->request->getGet('nvr_id') ?? 0);        $mon    = trim((string)$this->request->getGet('mon'));      // monitor id wajib        $startI = $this->request->getGet('start');                  // epoch ms        $endI   = $this->request->getGet('end');                    // epoch ms        // Resolve NVR ? base/api/group        $nvr = $db->table('nvrs')->where('id', $nvrId)->get()->getRowArray();        if (!$nvr || $mon === '') {            return $this->response->setJSON(['ok'=>false,'error'=>'missing params (nvr/mon)']);        }        $base = $nvr['base_url']; $g = $nvr['group_key']; $k = $nvr['api_key'];        // Convert epoch ms ? ISO8601 “YYYY-MM-DDTHH:mm:ss” (UTC)        $startIso = null; $endIso = null;        if (is_numeric($startI)) $startIso = gmdate('Y-m-d\TH:i:s', (int)floor(((int)$startI)/1000));        if (is_numeric($endI))   $endIso   = gmdate('Y-m-d\TH:i:s', (int)floor(((int)$endI)/1000));        $cli  = new \App\Libraries\Shinobi();        $resp = $cli->getVideosRange($base, $k, $g, $mon, $startIso, $endIso, null, null, true);        if (!$resp['ok'] || !is_array($resp['data'])) {            return $this->response->setJSON([                'ok'=>false,                'error'=>'Shinobi HTTP '.$resp['code'],                'data'=>[],            ]);        }        // Beberapa instance balikin {videos:[...]}, ada juga langsung array        $data = $resp['data'];        if (isset($data['videos']) && is_array($data['videos'])) $data = $data['videos'];        $rows = [];        foreach ($data as $v) {            // normalisasi key            $filename  = $v['filename'] ?? $v['href'] ?? $v['file'] ?? '';            $startMs   = (int)($v['time'] ?? $v['startTime'] ?? $v['start'] ?? 0);            $duration  = (float)($v['duration'] ?? $v['length'] ?? 0);            $size      = $v['size'] ?? ($v['filesize'] ?? '');            if ($filename === '') continue;            // URL file sesuai dok:            // base/[API KEY]/videos/[GROUP KEY]/[MONITOR ID]/[FILENAME]            $playUrl = rtrim($base,'/') . '/' . rawurlencode($k) . '/videos/' .                       rawurlencode($g) . '/' . rawurlencode($mon) . '/' . ltrim($filename,'/');            $rows[] = [                'start_ts'  => (int)floor($startMs/1000),                'start_str' => gmdate('Y-m-d H:i:s', (int)floor($startMs/1000)).' UTC',                'duration'  => $duration,                'size'      => $size,                'play'      => $playUrl,                'download'  => $playUrl,            ];        }        usort($rows, fn($a,$b)=> $b['start_ts'] <=> $a['start_ts']);        return $this->response->setJSON(['ok'=>true,'data'=>$rows]);    }}